package me.mbc.repository;import me.mbc.entity.UserInfoEntity;import me.mbc.util.SpecificationFactory;import org.apache.commons.lang3.StringUtils;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.domain.Specification;import org.springframework.data.jpa.domain.Specifications;import org.springframework.lang.Nullable;import org.springframework.test.context.junit4.SpringRunner;import javax.annotation.Resource;import javax.persistence.criteria.CriteriaBuilder;import javax.persistence.criteria.CriteriaQuery;import javax.persistence.criteria.Predicate;import javax.persistence.criteria.Root;import java.util.ArrayList;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class TestUserInfoRepository {    @Resource    UserInfoRepository userInfoRepository;    @Test    public void test1() {        UserInfoEntity userInfoEntity = new UserInfoEntity();        userInfoEntity.setTelephone("5645341").setVersion("1");        List<UserInfoEntity> all = userInfoRepository.findAll((root, query, cb) -> {            List<Predicate> list = new ArrayList<Predicate>();            list.add(cb.equal(root.get(UserInfoEntity.Fields.version), userInfoEntity.getVersion()));            list.add(cb.like(root.get(UserInfoEntity.Fields.telephone), userInfoEntity.getTelephone()));            return query.where(list.toArray(new Predicate[list.size()])).getRestriction();        });        all.forEach(System.out::println);    }    public Page<UserInfoEntity> findByCondition(UserInfoEntity userParam, Pageable pageable){        return userInfoRepository.findAll((root, query, cb) -> {            List<Predicate> predicates = new ArrayList<>();            if(StringUtils.isNoneBlank(userParam.getFirstName())){                predicates.add(cb.like(root.get("firstName"), "%" + userParam.getFirstName() + "%"));            }            if(StringUtils.isNoneBlank(userParam.getTelephone())){                predicates.add(cb.equal(root.get("telephone"), userParam.getTelephone()));            }            if(StringUtils.isNoneBlank(userParam.getVersion())){                predicates.add(cb.greaterThan(root.get("version"), userParam.getVersion()));            }            if(userParam.getBeginCreateTime() != null && userParam.getEndCreateTime() != null){                predicates.add(cb.between(root.get("createTime"), userParam.getBeginCreateTime(), userParam.getEndCreateTime()));            }            if(StringUtils.isNotBlank(userParam.getAddressCity())){                predicates.add(cb.equal(root.join("addressEntiryList").get("addressCity"),                        userParam.getAddressCity()));            }            return query.where(predicates.toArray(new Predicate[predicates.size()])).getRestriction();        }, pageable);    }    public void test2(){        UserInfoEntity userParam = null;        Pageable pageable = null;        userInfoRepository.findAll(SpecificationFactory.containsLike("firstName", userParam.getLastName()), pageable);        userInfoRepository.findAll(Specifications.where(                SpecificationFactory.containsLike("firstName", userParam.getLastName()))                        .and(SpecificationFactory.greaterThan("version", 12L)),                pageable);    }}